
// ********RoostGPT********
/*
Test generated by RoostGPT for test javaspring-unit-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=add_4082a7cb2a
ROOST_METHOD_SIG_HASH=add_33417800e1

"""
Scenario 1: Adding a Book to an Empty Cart

Details:
  TestName: addBookToEmptyCart
  Description: This test is meant to check the add method when a book is added to an initially empty cart.
Execution:
  Arrange: Create an instance of Book and Cart. Ensure the cart is empty initially.
  Act: Invoke the add method of the Cart instance, passing the Book instance.
  Assert: Use JUnit assertions to verify that the cart now contains one book, and it is the book that was added.
Validation:
  The assertion verifies that a book can be successfully added to an empty cart. The expected result is that the cart will contain one book, and it is the book that was added. This is significant as it tests the primary function of the add method under normal conditions.

Scenario 2: Adding a Book to a Cart that Already Contains Books

Details:
  TestName: addBookToNonEmptyCart
  Description: This test is meant to check the add method when a book is added to a cart that already contains books.
Execution:
  Arrange: Create instances of Book and Cart. Add some books to the cart initially.
  Act: Invoke the add method of the Cart instance, passing a new Book instance.
  Assert: Use JUnit assertions to verify that the cart contains the newly added book, and the total number of books in the cart is incremented by one.
Validation:
  The assertion verifies that a book can be successfully added to a cart that already contains books. This is significant as it tests the add method under conditions where the cart is not initially empty.

Scenario 3: Adding a Null Book to the Cart

Details:
  TestName: addNullBookToCart
  Description: This test is meant to check the add method when a null book is added to the cart.
Execution:
  Arrange: Create an instance of Cart. No need to create a Book instance.
  Act: Invoke the add method of the Cart instance, passing null as the book.
  Assert: Use JUnit assertions to verify that an error or exception is thrown.
Validation:
  The assertion verifies that adding a null book to the cart is not permitted and results in an error. This is significant as it tests the add method's error handling when invalid input is provided.

Scenario 4: Adding the Same Book Multiple Times to the Cart

Details:
  TestName: addSameBookMultipleTimes
  Description: This test is meant to check the add method when the same book is added multiple times to the cart.
Execution:
  Arrange: Create an instance of Book and Cart.
  Act: Invoke the add method of the Cart instance, passing the same Book instance multiple times.
  Assert: Use JUnit assertions to verify that the cart contains multiple instances of the same book.
Validation:
  The assertion verifies that the same book can be added multiple times to the cart. This is significant as it tests the add method's behavior when the same book is added more than once.
"""
*/

// ********RoostGPT********

package com.baeldung.model;

import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import java.util.List;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import java.util.ArrayList;

public class CartAddTest {

	private Cart cart;

	private Book book1;

	private Book book2;

	@Before
	public void setup() {
		cart = new Cart();
		book1 = new Book("Author1", "Title1", "ISBN1");
		book2 = new Book("Author2", "Title2", "ISBN2");
	}

	@Test
	@Category(Categories.valid.class)
	public void addBookToEmptyCart() {
		cart.add(book1);
		List<Book> books = cart.getBooks();
		assertEquals(1, books.size());
		assertTrue(books.contains(book1));
	}

	@Test
	@Category(Categories.valid.class)
	public void addBookToNonEmptyCart() {
		cart.add(book1);
		cart.add(book2);
		List<Book> books = cart.getBooks();
		assertEquals(2, books.size());
		assertTrue(books.contains(book1));
		assertTrue(books.contains(book2));
	}

	@Test(expected = NullPointerException.class)
	@Category(Categories.invalid.class)
	public void addNullBookToCart() {
		cart.add(null);
	}

	@Test
	@Category(Categories.boundary.class)
	public void addSameBookMultipleTimes() {
		cart.add(book1);
		cart.add(book1);
		List<Book> books = cart.getBooks();
		assertEquals(2, books.size());
		assertTrue(books.contains(book1));
	}

}