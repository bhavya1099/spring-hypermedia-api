// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=hashCode_306b64177c
ROOST_METHOD_SIG_HASH=hashCode_5a2657087a

"""
  Scenario 1: When the Books List is null

  Details:
    TestName: testHashCodeWhenBooksIsNull()
    Description: This test case checks the hashCode method when the 'books' list is null. It will test for an int result = 31*1 + 0 (since books is null) + (if purchased is true 1231 else 1237).
  Execution:
    Arrange: Create a instance of the class, with null 'books' and 'purchased' as either true or false.
    Act: Invoke the hashCode method on this class instance.
    Assert: Verify if the returned hashCode value is as expected.
  Validation:
    This test ensures that the hashCode method works as expected in null scenario for 'books'. This test is crucial to ensure the general contract of hashCode is upheld for these edge cases.

  Scenario 2: When Books List is not Null and Purchase is False

  Details:
    TestName: testHashCodeWhenBooksIsNotNullAndPurchasedFalse()
    Description: This test case checks the hashCode method when the 'books' list is not null, and 'purchased' is false. It will test for an int result = 31*1 + books.hashCode() + 1237 (since purchased is false).
  Execution:
    Arrange: Create an instance of the class with 'books' initialized and 'purchased' false.
    Act: Invoke the hashCode method on this class instance.
    Assert: Verify if the returned hashCode value is as expected.
  Validation:
    This test ensures the correctness of the hashCode method when 'books' is not null and 'purchased' is false. This verifies conformance with the general contract of hashCode.

  Scenario 3: When Books List is not Null and Purchase is True

  Details:
    TestName: testHashCodeWhenBooksIsNotNullAndPurchasedTrue()
    Description: This test case checks the hashCode method when both 'books' list and 'purchased' is true. It will test for an int result = 31*1 + books.hashCode() + 1231 (since purchased is true).
  Execution:
    Arrange: Create an instance of the class with 'books' initialized and 'purchased' true.
    Act: Invoke the hashCode method on this class instance.
    Assert: Verify if the returned hashCode value is as expected.
  Validation:
    This test checks functionality of hashCode in terms of both 'books' list and 'purchased' being true. This ensures the general contract of hashCode is met.

"""
*/

// ********RoostGPT********
package com.baeldung.model;

import java.util.ArrayList;
import org.junit.Test;
import org.junit.Assert;
import org.junit.Before;
import java.util.List;

public class CartHashCodeTest {

	private Cart cart;

	private Book book;

	@Before
	public void setUp() {
		cart = new Cart();
		book = new Book("Author", "Title", "ISBN");
	}

	@Test
	public void testHashCodeWhenBooksIsNull() {
		cart.setPurchased(true);
		int expectedHashCode = 31 * 1 + 1231;
		Assert.assertEquals(expectedHashCode, cart.hashCode());
	}

	@Test
	public void testHashCodeWhenBooksIsNotNullAndPurchasedFalse() {
		ArrayList<Book> books = new ArrayList<>();
		books.add(book);
		cart.setBooks(books);
		cart.setPurchased(false);
		int expectedHashCode = 31 * (31 * 1 + books.hashCode()) + 1237;
		Assert.assertEquals(expectedHashCode, cart.hashCode());
	}

	@Test
	public void testHashCodeWhenBooksIsNotNullAndPurchasedTrue() {
		ArrayList<Book> books = new ArrayList<>();
		books.add(book);
		cart.setBooks(books);
		cart.setPurchased(true);
		int expectedHashCode = 31 * (31 * 1 + books.hashCode()) + 1231;
		Assert.assertEquals(expectedHashCode, cart.hashCode());
	}

}