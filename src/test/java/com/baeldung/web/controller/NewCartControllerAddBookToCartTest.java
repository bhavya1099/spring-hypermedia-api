

// ********RoostGPT********
/*
Test generated by RoostGPT for test javaspring-unit-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=addBookToCart_e320cd71e0
ROOST_METHOD_SIG_HASH=addBookToCart_802ed3fbd5

"""
Scenario 1: Test to add a book to the cart when the book exists in the repository

Details:  
  TestName: testAddBookToCartWhenBookExists.
  Description: This test is meant to check if the addBookToCart method correctly adds a book to the cart when the book exists in the repository. 
Execution:
  Arrange: Mock the BookResource object with a valid Book and mock the BookRepository to return the Book when findByIsbn is called.
  Act: Invoke the addBookToCart method with the mock BookResource.
  Assert: Use JUnit assertions to check if the returned NewCartResource contains the added book.
Validation: 
  The assertion verifies that the book is successfully added to the cart when it exists in the repository. The successful execution of this test ensures the correct functionality of the addBookToCart method in the context of adding a valid book.

Scenario 2: Test to add a book to the cart when the book does not exist in the repository

Details:  
  TestName: testAddBookToCartWhenBookNotExists.
  Description: This test is meant to check if the addBookToCart method throws an error when the book does not exist in the repository. 
Execution:
  Arrange: Mock the BookResource object with a Book that does not exist in the repository and mock the BookRepository to return null when findByIsbn is called.
  Act: Invoke the addBookToCart method with the mock BookResource.
  Assert: Use JUnit assertions to expect an exception to be thrown.
Validation: 
  The assertion verifies that an exception is thrown when a book that does not exist in the repository is added to the cart. This test ensures the correct error handling of the addBookToCart method when an invalid book is added.

Scenario 3: Test to add a book to the cart when the cart is initially empty

Details:  
  TestName: testAddBookToCartWhenCartIsEmpty.
  Description: This test is meant to check if the addBookToCart method correctly adds a book to the cart when the cart is initially empty. 
Execution:
  Arrange: Mock the BookResource object with a valid Book and ensure that the books list is initially null.
  Act: Invoke the addBookToCart method with the mock BookResource.
  Assert: Use JUnit assertions to check if the returned NewCartResource contains the added book.
Validation: 
  The assertion verifies that the book is successfully added to the cart when the cart is initially empty. This test ensures the correct functionality of the addBookToCart method in the context of adding a book to an initially empty cart.
"""
*/

// ********RoostGPT********

package com.baeldung.web.controller;
import com.baeldung.model.Book;
import com.baeldung.persistence.BookRepository;
import com.baeldung.web.error.Checks;
import com.baeldung.web.resource.BookResource;
import com.baeldung.web.resource.NewCartResource;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.server.ResponseStatusException;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.*;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Link;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import com.baeldung.web.resource.CartResource;
import jersey.repackaged.com.google.common.collect.Lists;

@ExtendWith(MockitoExtension.class)
public class NewCartControllerAddBookToCartTest {
    @Mock
    private BookRepository bookRepo;
    @InjectMocks
    private NewCartController cartController;
    private Book testBook;
    private BookResource testBookResource;
    private String isbn = "1234567890";
    @BeforeEach
    public void setup() {
        testBook = new Book();
        testBook.setIsbn(isbn);
        testBookResource = new BookResource();
        testBookResource.setBook(testBook);
    }
    @Test
    @Tag("valid")
    public void testAddBookToCartWhenBookExists() {
        when(bookRepo.findByIsbn(anyString())).thenReturn(testBook);
        NewCartResource cartResource = cartController.addBookToCart(testBookResource);
        assertNotNull(cartResource);
        assertTrue(cartResource.getBooks().contains(testBook));
    }
    @Test
    @Tag("invalid")
    public void testAddBookToCartWhenBookNotExists() {
        when(bookRepo.findByIsbn(anyString())).thenReturn(null);
        assertThrows(ResponseStatusException.class, () -> cartController.addBookToCart(testBookResource));
    }
    @Test
    @Tag("valid")
    public void testAddBookToCartWhenCartIsEmpty() {
        cartController.clearYourCart();
        when(bookRepo.findByIsbn(anyString())).thenReturn(testBook);
        NewCartResource cartResource = cartController.addBookToCart(testBookResource);
        assertNotNull(cartResource);
        assertTrue(cartResource.getBooks().contains(testBook));
    }
}