

// ********RoostGPT********
/*
Test generated by RoostGPT for test javaspring-unit-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=findByIsbn_69e61535d1
ROOST_METHOD_SIG_HASH=findByIsbn_e67363ceec

Scenario 1: Valid ISBN is provided
Details:
  TestName: findByValidIsbn
  Description: This test is meant to check if the findByIsbn method returns the correct BookResource when a valid ISBN is provided.
Execution:
  Arrange: Mock the BookRepository to return a Book object when findByIsbn is called with a valid ISBN.
  Act: Invoke findByIsbn with a valid ISBN.
  Assert: Use JUnit assertions to check if the returned BookResource matches the expected BookResource.
Validation:
  The assertion aims to verify that the returned BookResource contains the correct Book information. The test ensures that the method correctly retrieves and converts the Book information when a valid ISBN is provided.

Scenario 2: Invalid ISBN is provided
Details:
  TestName: findByInvalidIsbn
  Description: This test is meant to check if the findByIsbn method throws the expected exception when an invalid ISBN is provided.
Execution:
  Arrange: Mock the BookRepository to return null when findByIsbn is called with an invalid ISBN.
  Act: Invoke findByIsbn with an invalid ISBN.
  Assert: Use JUnit assertions to check if the expected exception is thrown.
Validation:
  The assertion aims to verify that the method correctly handles the case where an invalid ISBN is provided. The test ensures that the method does not return incorrect data or cause unexpected behavior when provided with invalid input.

Scenario 3: Null ISBN is provided
Details:
  TestName: findByNullIsbn
  Description: This test is meant to check if the findByIsbn method throws the expected exception when null is provided as the ISBN.
Execution:
  Arrange: No arrangement needed as the ISBN is null.
  Act: Invoke findByIsbn with null as the ISBN.
  Assert: Use JUnit assertions to check if the expected exception is thrown.
Validation:
  The assertion aims to verify that the method correctly handles the case where null is provided as the ISBN. The test ensures that the method does not return incorrect data or cause unexpected behavior when provided with null input.

Scenario 4: ISBN of a non-existent book is provided
Details:
  TestName: findByNonExistentIsbn
  Description: This test is meant to check if the findByIsbn method throws the expected exception when the ISBN of a non-existent book is provided.
Execution:
  Arrange: Mock the BookRepository to return null when findByIsbn is called with the ISBN of a non-existent book.
  Act: Invoke findByIsbn with the ISBN of a non-existent book.
  Assert: Use JUnit assertions to check if the expected exception is thrown.
Validation:
  The assertion aims to verify that the method correctly handles the case where the ISBN of a non-existent book is provided. The test ensures that the method does not return incorrect data or cause unexpected behavior in this case.
*/

// ********RoostGPT********

package com.baeldung.web.controller;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;
import com.baeldung.model.Book;
import com.baeldung.persistence.BookRepository;
import com.baeldung.web.error.EntityNotFoundException;
import com.baeldung.web.resource.BookResource;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.junit.jupiter.api.*;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.baeldung.model.BookView;
import com.baeldung.web.error.Checks;
import com.fasterxml.jackson.annotation.JsonView;

@ExtendWith(SpringExtension.class)
public class BookControllerFindByIsbnTest {
    @Mock
    private BookRepository bookRepository;
    @InjectMocks
    private BookController bookController;
    @Test
    @Tag("valid")
    public void findByValidIsbn() {
        String isbn = "1234567890";
        Book book = new Book();
        when(bookRepository.findByIsbn(isbn)).thenReturn(book);
        BookResource bookResource = bookController.findByIsbn(isbn);
        assertEquals(new BookResource(book), bookResource);
        verify(bookRepository, times(1)).findByIsbn(isbn);
    }
    @Test
    @Tag("invalid")
    public void findByInvalidIsbn() {
        String isbn = "invalid_isbn";
        when(bookRepository.findByIsbn(isbn)).thenReturn(null);
        assertThrows(EntityNotFoundException.class, () -> {
            bookController.findByIsbn(isbn);
        });
        verify(bookRepository, times(1)).findByIsbn(isbn);
    }
    @Test
    @Tag("boundary")
    public void findByNullIsbn() {
        String isbn = null;
        assertThrows(EntityNotFoundException.class, () -> {
            bookController.findByIsbn(isbn);
        });
        verify(bookRepository, times(0)).findByIsbn(isbn);
    }
    @Test
    @Tag("invalid")
    public void findByNonExistentIsbn() {
        String isbn = "non_existent_isbn";
        when(bookRepository.findByIsbn(isbn)).thenReturn(null);
        assertThrows(EntityNotFoundException.class, () -> {
            bookController.findByIsbn(isbn);
        });
        verify(bookRepository, times(1)).findByIsbn(isbn);
    }
}