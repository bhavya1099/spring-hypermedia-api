This test file is marked invalid as it contains compilation errors. Change the extension to of this file to .java, to manually edit its contents


// ********RoostGPT********
/*
Test generated by RoostGPT for test javaspring-unit-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=create_997329f781
ROOST_METHOD_SIG_HASH=create_a73e82acf6

"""
Scenario 1: Test to check if the new book is saved successfully
Details:  
  TestName: testCreateBook.
  Description: This test is meant to check if the book details passed as the parameter are saved in the repository. 
Execution:
  Arrange: Mock the BookResource object and the save() method of BookRepository.
  Act: Invoke the create() method with the mock BookResource object.
  Assert: Verify if the save() method of the BookRepository is called.
Validation: 
  The save() method of the BookRepository should have been called. This would mean that the book details were attempted to be saved in the repository. 

Scenario 2: Test to check if the new book with null values is handled properly
Details:  
  TestName: testCreateBookWithNullValues.
  Description: This test is meant to check if the method can handle null values properly and does not cause any exceptions.
Execution:
  Arrange: Pass a null BookResource object to the create() method.
  Act: Invoke the create() method with the null object.
  Assert: Check if the save() method is not called.
Validation: 
  The save() method of the BookRepository should not have been called. This would mean that the null book resource was not attempted to be saved in the repository.

Scenario 3: Test to check if the save method fails
Details:  
  TestName: testCreateBookSaveFailure.
  Description: This test is meant to check if the method can handle failures from the save() method of the BookRepository.
Execution:
  Arrange: Mock the BookResource object and the save() method of BookRepository to throw an exception.
  Act: Invoke the create() method with the mock BookResource object.
  Assert: Check if an exception is thrown.
Validation: 
  An exception should have been thrown. This would mean that the method can handle failures from the save() method of the BookRepository. This is important to ensure the robustness of the application.
*/

// ********RoostGPT********

package com.baeldung.web.controller;
import com.baeldung.model.Book;
import com.baeldung.persistence.BookRepository;
import com.baeldung.web.resource.BookResource;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.*;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.baeldung.model.BookView;
import com.baeldung.web.error.Checks;
import com.fasterxml.jackson.annotation.JsonView;

@ExtendWith(MockitoExtension.class)
public class BookControllerCreateTest {
    @Mock
    private BookRepository repo;
    @InjectMocks
    private BookController controller;
    private BookResource bookResource;
    private Book book;
    @BeforeEach
    public void setUp() {
        book = new Book();
        bookResource = new BookResource(book);
    }
    @Tag("valid")
    @Test
    public void testCreateBook() {
        controller.create(bookResource);
        verify(repo, times(1)).save(book);
    }
    @Tag("invalid")
    @Test
    public void testCreateBookWithNullValues() {
        controller.create(null);
        verify(repo, never()).save(any(Book.class));
    }
    @Tag("boundary")
    @Test
    public void testCreateBookSaveFailure() {
        doThrow(RuntimeException.class).when(repo).save(any(Book.class));
        try {
            controller.create(bookResource);
        } catch (Exception e) {
            Mockito.verify(repo, times(1)).save(any(Book.class));
        }
    }
}